//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public with sharing class jsontoscan {

	public class Attributes {
		public Integer url_id {get;set;}
		public Integer customer_id {get;set;}
		public Integer user_id {get;set;}
		public String scan_date {get;set;}
		public Object internal_code {get;set;}
		public Object exit_code {get;set;}
		public String status {get;set;}
		public Decimal process_time {get;set;}
		public Object engine_version {get;set;}
		public String customer_name {get;set;}
		public String scan_details {get;set;}
		public Integer technical_debt {get;set;}
		public Decimal quality_of_cloud {get;set;}
		public Integer scanned_configuration_elements {get;set;}
		public Integer number_of_issues {get;set;}
		public String quality_gate_result {get;set;}
		public String quality_gate_message {get;set;}

		public Attributes(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'url-id') {
							url_id = parser.getIntegerValue();
						} else if (text == 'customer-id') {
							customer_id = parser.getIntegerValue();
						} else if (text == 'user-id') {
							user_id = parser.getIntegerValue();
						} else if (text == 'scan-date') {
							scan_date = parser.getText();
						} else if (text == 'internal-code') {
							internal_code = parser.getIntegerValue();
						} else if (text == 'exit-code') {
							exit_code = parser.getIntegerValue();
						} else if (text == 'status') {
							status = parser.getText();
						} else if (text == 'process-time') {
							process_time = Decimal.ValueOf(parser.getText());
						} else if (text == 'engine-version') {
							engine_version = parser.getText();
						} else if (text == 'customer-name') {
							customer_name = parser.getText();
						} else if (text == 'scan-details') {
							scan_details = parser.getText();
						} else if (text == 'technical-debt') {
							technical_debt = Integer.ValueOf(parser.getText());
						} else if (text == 'quality-of-cloud') {
							quality_of_cloud = Decimal.ValueOf(parser.getText());
						} else if (text == 'scanned-configuration-elements') {
							scanned_configuration_elements = parser.getIntegerValue();
						} else if (text == 'number-of-issues') {
							number_of_issues = parser.getIntegerValue();
						} else if (text == 'quality-gate-result') {
							quality_gate_result = parser.getText();
						} else if (text == 'quality-gate-message') {
							quality_gate_message = parser.getText();						
						} else {
							System.debug(LoggingLevel.WARN, 'Attributes consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class Links {
		public String self {get;set;}

		public Links(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'self') {
							self = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Links consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class Data {
		public String type_Z {get;set;} // in json: type
		public String id {get;set;}
		public Attributes attributes {get;set;}
		public Links links {get;set;}

		public Data(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'type') {
							type_Z = parser.getText();
						} else if (text == 'id') {
							id = parser.getText();
						} else if (text == 'attributes') {
							attributes = new Attributes(parser);
						} else if (text == 'links') {
							links = new Links(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class Jsontoscan_c {
		public Data data {get;set;}

		public Jsontoscan_c(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'data') {
							data = new Data(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Jsontoscan consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}


	public static Jsontoscan_c parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new Jsontoscan_c(parser);
	}

	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT ||
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}

}