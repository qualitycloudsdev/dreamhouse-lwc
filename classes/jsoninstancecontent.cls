//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public with sharing class jsoninstancecontent {

	public class Meta {
		public Integer current_page {get;set;}
		public Integer per_page {get;set;}
		public Integer from_Z {get;set;} // in json: from
		public Integer to {get;set;}
		public Integer total {get;set;}
		public Integer last_page {get;set;}
		public Integer total_resources {get;set;}
		public Integer resources_per_page {get;set;}

		public Meta(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'current-page') {
							current_page = parser.getIntegerValue();
						} else if (text == 'per-page') {
							per_page = parser.getIntegerValue();
						} else if (text == 'from') {
							from_Z = parser.getIntegerValue();
						} else if (text == 'to') {
							to = parser.getIntegerValue();
						} else if (text == 'total') {
							total = parser.getIntegerValue();
						} else if (text == 'last-page') {
							last_page = parser.getIntegerValue();
						} else if (text == 'total_resources') {
							total_resources = parser.getIntegerValue();
						} else if (text == 'resources_per_page') {
							resources_per_page = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Meta consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class Links_Z {
		public String self {get;set;}

		public Links_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'self') {
							self = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Links_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class Jsoninstancecontent_c {
		public Meta meta {get;set;}
		public Links links {get;set;}
		public List<Data> data {get;set;}

		public Jsoninstancecontent_c(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'meta') {
							meta = new Meta(parser);
						} else if (text == 'links') {
							links = new Links(parser);
						} else if (text == 'data') {
							data = arrayOfData(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Jsoninstancecontent_c consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class Attributes_Y {
		public String description {get;set;}
		public Integer environment_id {get;set;}
		public String environment {get;set;}
		public String service_name {get;set;}
		public String url {get;set;}
		public String login_url {get;set;}
		public String last_scan_test_result {get;set;}
		public String last_scan_test_datetime {get;set;}
		public String last_scan_test_details {get;set;}
		public String target {get;set;}
		public Boolean is_feature_branch {get;set;}
		public Integer git_flavor_id {get;set;}
		public String git_repository_url {get;set;}
		public Object git_branch {get;set;}
		public String go_live {get;set;}
		public Boolean dont_persist_credentials {get;set;}
		public String org_id {get;set;}

		public Attributes_Y(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'description') {
							description = parser.getText();
						} else if (text == 'environment-id') {
							environment_id = parser.getIntegerValue();
						} else if (text == 'environment') {
							environment = parser.getText();
						} else if (text == 'service-name') {
							service_name = parser.getText();
						} else if (text == 'url') {
							url = parser.getText();
						} else if (text == 'login-url') {
							login_url = parser.getText();
						} else if (text == 'last-scan-test-result') {
							last_scan_test_result = parser.getText();
						} else if (text == 'last-scan-test-datetime') {
							last_scan_test_datetime = parser.getText();
						} else if (text == 'last-scan-test-details') {
							last_scan_test_details = parser.getText();
						} else if (text == 'target') {
							target = parser.getText();
						} else if (text == 'is-feature-branch') {
							is_feature_branch = parser.getBooleanValue();
						} else if (text == 'git-flavor-id') {
							git_flavor_id = parser.getIntegerValue();
						} else if (text == 'git-repository-url') {
							git_repository_url = parser.getText();
						} else if (text == 'git-branch') {
							git_branch = parser.getText();
						} else if (text == 'go-live') {
							go_live = parser.getText();
						} else if (text == 'dont-persist-credentials') {
							dont_persist_credentials = parser.getBooleanValue();
						} else if (text == 'org-id') {
							org_id = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Attributes_Y consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class Attributes_Z {
		public String description {get;set;}
		public Integer environment_id {get;set;}
		public String environment {get;set;}
		public String service_name {get;set;}
		public String url {get;set;}
		public String login_url {get;set;}
		public String last_scan_test_result {get;set;}
		public String last_scan_test_datetime {get;set;}
		public String last_scan_test_details {get;set;}
		public String target {get;set;}
		public Boolean is_feature_branch {get;set;}
		public Integer git_flavor_id {get;set;}
		public String git_repository_url {get;set;}
		public String git_branch {get;set;}
		public String go_live {get;set;}
		public Boolean dont_persist_credentials {get;set;}
		public String org_id {get;set;}

		public Attributes_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'description') {
							description = parser.getText();
						} else if (text == 'environment-id') {
							environment_id = parser.getIntegerValue();
						} else if (text == 'environment') {
							environment = parser.getText();
						} else if (text == 'service-name') {
							service_name = parser.getText();
						} else if (text == 'url') {
							url = parser.getText();
						} else if (text == 'login-url') {
							login_url = parser.getText();
						} else if (text == 'last-scan-test-result') {
							last_scan_test_result = parser.getText();
						} else if (text == 'last-scan-test-datetime') {
							last_scan_test_datetime = parser.getText();
						} else if (text == 'last-scan-test-details') {
							last_scan_test_details = parser.getText();
						} else if (text == 'target') {
							target = parser.getText();
						} else if (text == 'is-feature-branch') {
							is_feature_branch = parser.getBooleanValue();
						} else if (text == 'git-flavor-id') {
							git_flavor_id = parser.getIntegerValue();
						} else if (text == 'git-repository-url') {
							git_repository_url = parser.getText();
						} else if (text == 'git-branch') {
							git_branch = parser.getText();
						} else if (text == 'go-live') {
							go_live = parser.getText();
						} else if (text == 'dont-persist-credentials') {
							dont_persist_credentials = parser.getBooleanValue();
						} else if (text == 'org-id') {
							org_id = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Attributes_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class Attributes {
		public String description {get;set;}
		public Integer environment_id {get;set;}
		public String environment {get;set;}
		public String service_name {get;set;}
		public String url {get;set;}
		public String login_url {get;set;}
		public String last_scan_test_result {get;set;}
		public String last_scan_test_datetime {get;set;}
		public String last_scan_test_details {get;set;}
		public String target {get;set;}
		public Boolean is_feature_branch {get;set;}
		public Object git_flavor_id {get;set;}
		public Object git_repository_url {get;set;}
		public Object git_branch {get;set;}
		public String go_live {get;set;}
		public Boolean dont_persist_credentials {get;set;}
		public String org_id {get;set;}

		public Attributes(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'description') {
							description = parser.getText();
						} else if (text == 'environment-id') {
							environment_id = parser.getIntegerValue();
						} else if (text == 'environment') {
							environment = parser.getText();
						} else if (text == 'service-name') {
							service_name = parser.getText();
						} else if (text == 'url') {
							url = parser.getText();
						} else if (text == 'login-url') {
							login_url = parser.getText();
						} else if (text == 'last-scan-test-result') {
							last_scan_test_result = parser.getText();
						} else if (text == 'last-scan-test-datetime') {
							last_scan_test_datetime = parser.getText();
						} else if (text == 'last-scan-test-details') {
							last_scan_test_details = parser.getText();
						} else if (text == 'target') {
							target = parser.getText();
						} else if (text == 'is-feature-branch') {
							is_feature_branch = parser.getBooleanValue();
						} else if (text == 'git-flavor-id') {
							git_flavor_id = parser.getText();
						} else if (text == 'git-repository-url') {
							git_repository_url = parser.getText();
						} else if (text == 'git-branch') {
							git_branch = parser.getText();
						} else if (text == 'go-live') {
							go_live = parser.getText();
						} else if (text == 'dont-persist-credentials') {
							dont_persist_credentials = parser.getBooleanValue();
						} else if (text == 'org-id') {
							org_id = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Attributes consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class Links {
		public String first {get;set;}
		public String last {get;set;}

		public Links(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'first') {
							first = parser.getText();
						} else if (text == 'last') {
							last = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Links consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class Data {
		public String type_Z {get;set;} // in json: type
		public String id {get;set;}
		public Attributes attributes {get;set;}
		public Links_Z links {get;set;}

		public Data(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'type') {
							type_Z = parser.getText();
						} else if (text == 'id') {
							id = parser.getText();
						} else if (text == 'attributes') {
							attributes = new Attributes(parser);
						} else if (text == 'links') {
							links = new Links_Z(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}


	public static Jsoninstancecontent_c parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new Jsoninstancecontent_c(parser);
	}

	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT ||
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}


    private static List<Data> arrayOfData(System.JSONParser p) {
        List<Data> res = new List<Data>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Data(p));
        }
        return res;
    }















}